def negate_literal(literal):
    """ Negate a literal """
    return literal[1:] if literal[0] == '~' else f'~{literal}'

def resolve(clause1, clause2):
    """ Resolve two clauses """
    for lit1 in clause1:
        for lit2 in clause2:
            if lit1 == negate_literal(lit2):
                new_clause = (clause1 - {lit1}) | (clause2 - {lit2})
                return new_clause
    return None

def resolution(clauses):
    """ Perform resolution on a set of clauses """
    clauses = list(clauses)  # Convert set of clauses to list
    while True:
        new_clauses = set()
        for i in range(len(clauses)):
            for j in range(i + 1, len(clauses)):
                resolvent = resolve(clauses[i], clauses[j])
                if resolvent is not None:
                    if not resolvent:
                        return True

                    new_clauses.add(frozenset(resolvent))
        if new_clauses.issubset(set(clauses)):
            return False
        clauses.extend(new_clauses)

# Example usage
clauses = [
    frozenset({'~P', 'Q'}),
    frozenset({'P'}),
    frozenset({'~Q'})
]

result = resolution(set(clauses))
print("The set of clauses is unsatisfiable:", result)
